# Intro

Thank you for picking up this book. Hopefully you are here to learn more about the art of software testing. You might be a leader of a software team, a developer interested in testing, a tester who's just starting their career or anyone else inbetween. If you work with software and are interested in deliverying quality products, there's something for you in this book.

Please don't complain to me about the title of the book. I don't like it much myself. It's too simplyfied to to catch all of the naunce with software testing and building quality products.

Shift left implies something happens in a linear way and software development isn't linear. In this book I'll often talk about the design, build, ship and support feedback loops 
and in a way you can't support something you haven't designed, built or shipped yet. But all of these tasks can happen at the same time.

The shift left referenced here is more about a shift in mindset; 
How can we help our teams to own and improve their own quality engineering practices?
How can we coach our teams to think quality is a team responsibility? 
How can I shift the responsibility of quality?

And we can't build quality into a product either, no matter how hard we try. Only our customers can tell us if we have a quality product or not.  But we can build in feedback loops such that potential issues are raised and fixed in a timely matter. Hopefully preventing our customers from developing a perception of poor quality.

I picked this title because it was short and sweet. I thought it would help me sell more books. What would you have named this book instead?

You don't need to read this book from start to finish. Pick a chapter, skim through and try to practice something new in your work or share an idea with a colleague. This book is about helping you collaborate with your team. I personally rarely finish reading any technical book, so please don't feel bad for "not reading everything".

Even though this book is about software testing, there won't be a huge amount of technical detail. This book is more "hints and tips" for thinking about testing over a technical deep dive.

All of the examples in this book are from my own career in tech and interactions from the wider testing community. I've been a software tester of some description for 10 years and have worked accross a variety of industries and products. My specialty is mobile apps and finance and many of my examples are specific to these fields. You will find my examples are applicable to many other fields though.

If you are a lead or in a senior role start with chapter x; topics include quality coaching, etc, etc.

If you are mid career start with chapter X, topics include how to run a bug bash, imrpoving technical skills and blah.

If you are early on in your testing journey you could start with chapter X, what are mind maps, exploratory testing skills, how to write a bug report, etc etc.

TODO: Cleanup Intro
Who is this book for?
Structure? How to use this book?
Highlights?
What is Shift Left?


NOTE: Keeping this template stuff for future refences in how to do linking
This is some default content for a new Leanpub book.

You can download the manuscript folder containing the plain text files from which this book is generated. That way, you can see how everything in this book is actually written.

Here is the download link for a zip file with the manuscript of this book: [https://github.com/leanpub/default-new-book-content/archive/master.zip](https://github.com/leanpub/default-new-book-content/archive/master.zip).

Please note you can find our manual here: [https://leanpub.com/help/manual](https://leanpub.com/help/manual).

We also have a author Help Center here: [http://help.leanpub.com/author-help](http://help.leanpub.com/author-help).

In the following chapters you'll see some simple examples of how to format your writing and how to insert images.

Testing preview integration with LeanPub.
